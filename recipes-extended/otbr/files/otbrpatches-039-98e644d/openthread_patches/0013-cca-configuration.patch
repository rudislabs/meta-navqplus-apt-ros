diff --git a/include/openthread/platform/radio.h b/include/openthread/platform/radio.h
index cd9812716..9444d1d44 100644
--- a/include/openthread/platform/radio.h
+++ b/include/openthread/platform/radio.h
@@ -393,6 +393,17 @@ typedef struct otLinkMetrics
     bool mReserved : 1;   ///< Reserved, this is for reference device.
 } otLinkMetrics;
 
+/**
+ * This structure represents different CCA mode configurations before Tx.
+ */
+typedef struct otCCAModeConfig
+{
+    uint8_t mCcaMode;          ///< CCA Mode type [CCA1=0x01, CCA2=0x02, CCA3=0x03[CCA1 AND CCA2], NoCCA=0x04].
+    uint8_t mCca1Threshold;    ///< Energy threshold for CCA Mode1.
+    uint8_t mCca2CorrThreshold;    ///< CCA Mode 2 Correlation Threshold.
+    uint8_t mCca2MinNumOfCorrTh;    ///< CCA Mode 2 Threshold Number of Correlation Peaks.
+} otCCAModeConfig;
+
 /**
  * @}
  *
@@ -1179,6 +1190,12 @@ otError otPlatRadioGetTxPowerLimit(otInstance *aInstance, uint8_t* txPowerLimit)
  */
 otError otPlatRadioMfgCommand(otInstance *aInstance, uint8_t *payload, const uint8_t payloadLenIn, uint8_t *payloadLenOut);
 
+/**
+ * @}
+ *
+ */
+otError otPlatRadioCcaConfigValue(otInstance *aInstance, otCCAModeConfig *aCcaConfig, uint8_t aSetValue);
+
 #ifdef __cplusplus
 } // end of extern "C"
 #endif
diff --git a/src/lib/spinel/radio_spinel.hpp b/src/lib/spinel/radio_spinel.hpp
index 9e4a5374d..52721efcc 100644
--- a/src/lib/spinel/radio_spinel.hpp
+++ b/src/lib/spinel/radio_spinel.hpp
@@ -217,6 +217,16 @@ public:
      */
     otError MfgCmd(uint8_t *payload, const uint8_t payloadLenIn, uint8_t &payloadLenOut);
 
+    /**
+     * @brief Set / Get the CCA Mode Configuration Values
+     *
+     * @param &aCcaConfig
+     * will contain the CCA Configuration values of datatype otCCAModeConfig.
+     *
+     * @return otError
+     */
+    otError CcaConfigValue(otCCAModeConfig &aCcaConfig, uint8_t aSetValue);
+
     /**
      * This method sets the Extended Address for address filtering.
      *
diff --git a/src/lib/spinel/radio_spinel_impl.hpp b/src/lib/spinel/radio_spinel_impl.hpp
index 6c6a42ba4..b2fbe9fb8 100644
--- a/src/lib/spinel/radio_spinel_impl.hpp
+++ b/src/lib/spinel/radio_spinel_impl.hpp
@@ -1265,6 +1265,31 @@ otError RadioSpinel<InterfaceType, ProcessContextType>::MfgCmd(uint8_t *payload,
     return error;
 }
 
+template <typename InterfaceType, typename ProcessContextType>
+otError RadioSpinel<InterfaceType, ProcessContextType>::CcaConfigValue(otCCAModeConfig &aCcaConfig, uint8_t aSetValue)
+{
+    otError error;
+    uint8_t aCcaMode, aCca1Threshold, aCca2CorrThreshold, aCca2MinNumOfCorrTh;
+
+    if(aSetValue)
+    {
+        error = Set(SPINEL_PROP_VENDOR_NXP_GET_SET_CCA_CONFIGURE_CMD, SPINEL_DATATYPE_STRUCT_S(SPINEL_DATATYPE_UINT8_S
+                    SPINEL_DATATYPE_UINT8_S SPINEL_DATATYPE_UINT8_S SPINEL_DATATYPE_UINT8_S), (&aCcaConfig)->mCcaMode,
+                    (&aCcaConfig)->mCca1Threshold, (&aCcaConfig)->mCca2CorrThreshold, (&aCcaConfig)->mCca2MinNumOfCorrTh);
+    }
+    else
+    {
+        error = Get(SPINEL_PROP_VENDOR_NXP_GET_SET_CCA_CONFIGURE_CMD, SPINEL_DATATYPE_STRUCT_S(SPINEL_DATATYPE_UINT8_S
+                    SPINEL_DATATYPE_UINT8_S SPINEL_DATATYPE_UINT8_S SPINEL_DATATYPE_UINT8_S), &aCcaMode, &aCca1Threshold,
+                    &aCca2CorrThreshold, &aCca2MinNumOfCorrTh);
+        (&aCcaConfig)->mCcaMode = aCcaMode;
+        (&aCcaConfig)->mCca1Threshold = aCca1Threshold;
+        (&aCcaConfig)->mCca2CorrThreshold = aCca2CorrThreshold;
+        (&aCcaConfig)->mCca2MinNumOfCorrTh = aCca2MinNumOfCorrTh;
+    }
+
+    return error;
+}
 template <typename InterfaceType, typename ProcessContextType>
 otError RadioSpinel<InterfaceType, ProcessContextType>::SetExtendedAddress(const otExtAddress &aExtAddress)
 {
diff --git a/src/lib/spinel/spinel.h b/src/lib/spinel/spinel.h
index 2557ae719..34d66db92 100644
--- a/src/lib/spinel/spinel.h
+++ b/src/lib/spinel/spinel.h
@@ -4814,6 +4814,7 @@ enum
     SPINEL_PROP_VENDOR_NXP_IR_CMD        = (SPINEL_PROP_VENDOR__BEGIN + 0x101),
     SPINEL_PROP_VENDOR_NXP_SET_EUI64_CMD = (SPINEL_PROP_VENDOR__BEGIN + 0x10A),
     SPINEL_PROP_VENDOR_NXP_GET_SET_TXPOWERLIMIT_CMD = (SPINEL_PROP_VENDOR__BEGIN + 0x10B),
+    SPINEL_PROP_VENDOR_NXP_GET_SET_CCA_CONFIGURE_CMD = (SPINEL_PROP_VENDOR__BEGIN + 0x10C),
     SPINEL_CMD_VENDOR_NXP_MFG  = (SPINEL_CMD_VENDOR__BEGIN + 0x3FF),
 
     SPINEL_PROP_VENDOR__END   = 0x4000,
diff --git a/src/posix/main.c b/src/posix/main.c
index 4c0944e12..16f13b8bb 100644
--- a/src/posix/main.c
+++ b/src/posix/main.c
@@ -75,6 +75,7 @@ extern otError ProcessIRCmd(void *aContext, uint8_t aArgsLength, char *aArgs[]);
 extern otError ProcessSetEui64(void *aContext, uint8_t aArgsLength, char *aArgs[]);
 extern otError ProcessGetSetTxPowerLimit(void *aContext, uint8_t aArgsLength, char *aArgs[]);
 extern otError ProcessMfgCommands(void *aContext, uint8_t aArgsLength, char *aArgs[]);
+extern otError ProcessGetSetCcaCfg(void *aContext, uint8_t aArgsLength, char *aArgs[]);
 
 /**
  * This function initializes NCP app.
@@ -366,7 +367,8 @@ static const otCliCommand kCommands[] = {
     {"ircmd", ProcessIRCmd},       //=> InBand Independent Reset command
     {"seteui64", ProcessSetEui64}, //=> Set ieee.802.15.4 MAC Address
     {"txpwrlimit", ProcessGetSetTxPowerLimit}, //=> Set TX power limit for 15.4
-    {"mfgcmd", ProcessMfgCommands} //=> Generic VSC for MFG RF commands
+    {"mfgcmd", ProcessMfgCommands}, //=> Generic VSC for MFG RF commands
+    {"ccacfg", ProcessGetSetCcaCfg} //=> Set/Get CCA configuration for 15.4 CCA Before Tx operation
 };
 
 int main(int argc, char *argv[])
diff --git a/src/posix/platform/daemon.cpp b/src/posix/platform/daemon.cpp
index 8c97a844b..fa13ccdf6 100644
--- a/src/posix/platform/daemon.cpp
+++ b/src/posix/platform/daemon.cpp
@@ -565,12 +565,58 @@ otError ProcessMfgCommands(void *aContext, uint8_t aArgsLength, char *aArgs[])
 
     return error;
 }
+
+otError ProcessGetSetCcaCfg(void *aContext, uint8_t aArgsLength, char *aArgs[])
+{
+    otCCAModeConfig aCcaCfg;
+    //syslog(LOG_INFO, "SetCcaConfig");
+
+    if( aArgsLength == 4 ) // set cca configuration
+    {
+        aCcaCfg.mCcaMode            = (uint8_t)strtol(aArgs[0], NULL, 16);
+        aCcaCfg.mCca1Threshold      = (uint8_t)strtol(aArgs[1], NULL, 16);
+        aCcaCfg.mCca2CorrThreshold  = (uint8_t)strtol(aArgs[2], NULL, 16);
+        aCcaCfg.mCca2MinNumOfCorrTh = (uint8_t)strtol(aArgs[3], NULL, 16);
+        if((aCcaCfg.mCcaMode>=1)&&(aCcaCfg.mCcaMode<=4) &&
+           (aCcaCfg.mCca2MinNumOfCorrTh <= 6) ){
+            otPlatRadioCcaConfigValue((otInstance*)aContext, &aCcaCfg, 0x1);
+            //syslog(LOG_INFO, "SetCcaConfig DONE");
+        }
+    }
+    else if ( aArgsLength == 0 ) // get tx power limit
+    {
+        otPlatRadioCcaConfigValue((otInstance*)aContext, &aCcaCfg, 0x0);
+
+        // Add value in syslog
+        //syslog(LOG_INFO, "CCA Configuration:\r\n");
+        //syslog(LOG_INFO, "CCA Mode type [CCA1=1, CCA2=2, CCA3=3[CCA1 AND CCA2]: %d\r\n", aCcaCfg.mCcaMode);
+        //syslog(LOG_INFO, "CCA1 Threshold Value : 0x%x\r\n", aCcaCfg.mCca1Threshold);
+        //syslog(LOG_INFO, "CCA2 Correlation Threshold Value : 0x%x\r\n", aCcaCfg.mCca2CorrThreshold);
+        //syslog(LOG_INFO, "CCA2 Minimim Number of Correlation Threshold Value : 0x%x\r\n", aCcaCfg.mCca2MinNumOfCorrTh);
+
+        // Print value as ot-cli output
+        otCliOutputFormat("CCA Configuration:\r\n");
+        otCliOutputFormat("CCA Mode type [CCA1=1, CCA2=2, CCA3=3[CCA1 AND CCA2]: %d\r\n", aCcaCfg.mCcaMode);
+        otCliOutputFormat("CCA1 Threshold Value : 0x%x\r\n", aCcaCfg.mCca1Threshold);
+        otCliOutputFormat("CCA2 Correlation Threshold Value : 0x%x\r\n", aCcaCfg.mCca2CorrThreshold);
+        otCliOutputFormat("CCA2 Minimim Number of Correlation Threshold Value : 0x%x\r\n", aCcaCfg.mCca2MinNumOfCorrTh);
+    }
+    else
+    {
+        //syslog(LOG_INFO, "SetTxPowerLimit FAILED! Invalid input arg\r\nFormat: ccacfg <CcaMode> <Cca1Threshold> <Cca2CorrThreshold> <Cca2MinNumOfCorrTh>\r\nCcaMode: CCA Mode type [CCA1=1, CCA2=2, CCA3=3[CCA1 AND CCA2], NoCCA=4]\r\nCca1Threshold[1Byte Hex value]: Energy threshold for CCA Mode1\r\nCca2CorrThreshold[1Byte Hex value]: CCA Mode 2 Correlation Threshold\r\nCca2MinNumOfCorrTh: [0 to 6]\r\n");
+        otCliOutputFormat("SetTxPowerLimit FAILED! Invalid input arg\r\nFormat: ccacfg <CcaMode> <Cca1Threshold> <Cca2CorrThreshold> <Cca2MinNumOfCorrTh>\r\nCcaMode: CCA Mode type [CCA1=1, CCA2=2, CCA3=3[CCA1 AND CCA2], NoCCA=4]\r\nCca1Threshold[1Byte Hex value]: Energy threshold for CCA Mode1\r\nCca2CorrThreshold[1Byte Hex value]: CCA Mode 2 Correlation Threshold\r\nCca2MinNumOfCorrTh: [0 to 6]\r\n");
+    }
+
+    return OT_ERROR_NONE;
+}
+
 static const otCliCommand kCommands[] = {
     {"ircfg", ProcessIRConfig},    //=> OutOfBand Independent Reset Configuration ircfg <1> means OOB mode
     {"ircmd", ProcessIRCmd},       //=> InBand Independent Reset command
     {"seteui64", ProcessSetEui64}, //=> Set ieee.802.15.4 MAC Address
     {"txpwrlimit", ProcessGetSetTxPowerLimit}, //=> Set TX power limit for 15.4
-    {"mfgcmd", ProcessMfgCommands} //=> Generic VSC for MFG RF commands
+    {"mfgcmd", ProcessMfgCommands}, //=> Generic VSC for MFG RF commands
+    {"ccacfg", ProcessGetSetCcaCfg} //=> Set/Get CCA configuration for 15.4 CCA Before Tx operation
 };
 } //extern "C"
 
diff --git a/src/posix/platform/radio.cpp b/src/posix/platform/radio.cpp
index 080dc5d9f..81fc2d129 100644
--- a/src/posix/platform/radio.cpp
+++ b/src/posix/platform/radio.cpp
@@ -777,6 +777,12 @@ otError otPlatRadioMfgCommand(otInstance *aInstance, uint8_t *payload, const uin
     return sRadioSpinel.MfgCmd(payload, payloadLenIn, *payloadLenOut);
 }
 
+otError otPlatRadioCcaConfigValue(otInstance *aInstance, otCCAModeConfig *aOtCCAModeConfig, uint8_t aSetValue)
+{
+    OT_UNUSED_VARIABLE(aInstance);
+    return sRadioSpinel.CcaConfigValue(*aOtCCAModeConfig, aSetValue);
+}
+
 const otRadioSpinelMetrics *otSysGetRadioSpinelMetrics(void) { return sRadioSpinel.GetRadioSpinelMetrics(); }
 
 const otRcpInterfaceMetrics *otSysGetRcpInterfaceMetrics(void)
