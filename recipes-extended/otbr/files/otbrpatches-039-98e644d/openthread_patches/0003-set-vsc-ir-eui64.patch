diff --git a/include/openthread/platform/radio.h b/include/openthread/platform/radio.h
index a4b916bba..78f6f3182 100644
--- a/include/openthread/platform/radio.h
+++ b/include/openthread/platform/radio.h
@@ -1148,11 +1148,19 @@ otError otPlatRadioConfigureEnhAckProbing(otInstance         *aInstance,
  * @}
  *
  */
+void otPlatRadioSetIRCmd(otInstance *aInstance);
 
 /**
  * @}
  *
  */
+void otPlatRadioSetIRConfig(otInstance *aInstance, uint8_t mode);
+
+/**
+ * @}
+ *
+ */
+otError otPlatRadioSetIeeeEui64(otInstance *aInstance, const otExtAddress *aIeeeEui64);
 
 #ifdef __cplusplus
 } // end of extern "C"
diff --git a/src/lib/spinel/radio_spinel.hpp b/src/lib/spinel/radio_spinel.hpp
index 4fd53b9f8..859672cfd 100644
--- a/src/lib/spinel/radio_spinel.hpp
+++ b/src/lib/spinel/radio_spinel.hpp
@@ -175,6 +175,18 @@ public:
      */
     otError GetIeeeEui64(uint8_t *aIeeeEui64);
 
+    /**
+     * This method sets the factory-assigned IEEE EUI-64 for this transceiver.
+     *
+     * @param[in]  aInstance   The OpenThread instance structure.
+     * @param[out] aIeeeEui64  A pointer to the factory-assigned IEEE EUI-64.
+     *
+     * @retval  OT_ERROR_NONE               Succeeded.
+     * @retval  OT_ERROR_INVALID_STATE      Failed EUI64 is set by factory only except if OTP is not supported.
+     *
+     */
+    otError SetIeeeEui64(const otExtAddress &aIeeeEui64);
+
     /**
      * This method sets the Extended Address for address filtering.
      *
diff --git a/src/lib/spinel/radio_spinel_impl.hpp b/src/lib/spinel/radio_spinel_impl.hpp
index 5b5fba9bb..ac3df87d6 100644
--- a/src/lib/spinel/radio_spinel_impl.hpp
+++ b/src/lib/spinel/radio_spinel_impl.hpp
@@ -1216,6 +1216,23 @@ otError RadioSpinel<InterfaceType, ProcessContextType>::GetIeeeEui64(uint8_t *aI
     return OT_ERROR_NONE;
 }
 
+template <typename InterfaceType, typename ProcessContextType>
+otError RadioSpinel<InterfaceType, ProcessContextType>::SetIeeeEui64(const otExtAddress &aIeeeEui64)
+{
+    otExtAddress addr;
+    otError      error;
+
+    for (size_t i = 0; i < sizeof(addr); i++)
+    {
+        addr.m8[i] = aIeeeEui64.m8[sizeof(addr) - 1 - i];
+    }
+
+    SuccessOrExit(error = Set(SPINEL_PROP_VENDOR_NXP_SET_EUI64_CMD, SPINEL_DATATYPE_EUI64_S, addr.m8));
+    mIeeeEui64 = aIeeeEui64;
+exit:
+    return error;
+}
+
 template <typename InterfaceType, typename ProcessContextType>
 otError RadioSpinel<InterfaceType, ProcessContextType>::SetExtendedAddress(const otExtAddress &aExtAddress)
 {
diff --git a/src/lib/spinel/spinel.h b/src/lib/spinel/spinel.h
index 2e70e7da8..22398d3bc 100644
--- a/src/lib/spinel/spinel.h
+++ b/src/lib/spinel/spinel.h
@@ -4809,6 +4809,11 @@ enum
     SPINEL_PROP_NEST__END = 0x3C00,
 
     SPINEL_PROP_VENDOR__BEGIN = 0x3C00,
+
+    SPINEL_PROP_VENDOR_NXP_IR_CONFIG     = (SPINEL_PROP_VENDOR__BEGIN + 0x100),
+    SPINEL_PROP_VENDOR_NXP_IR_CMD        = (SPINEL_PROP_VENDOR__BEGIN + 0x101),
+    SPINEL_PROP_VENDOR_NXP_SET_EUI64_CMD = (SPINEL_PROP_VENDOR__BEGIN + 0x10A),
+
     SPINEL_PROP_VENDOR__END   = 0x4000,
 
     SPINEL_PROP_VENDOR_ESP__BEGIN = (SPINEL_PROP_VENDOR__BEGIN + 0),
diff --git a/src/posix/main.c b/src/posix/main.c
index 9b81e2d0f..0ac11e71c 100644
--- a/src/posix/main.c
+++ b/src/posix/main.c
@@ -351,11 +351,116 @@ static otError ProcessExit(void *aContext, uint8_t aArgsLength, char *aArgs[])
 }
 #endif
 
+// 15.4_INDEPENDENT_RESET
+static otError ProcessIRConfig(void *aContext, uint8_t aArgsLength, char *aArgs[])
+{
+    syslog(LOG_INFO, "ProcessIRConfig");
+
+    if( aArgsLength == 1 )
+    {
+        uint16_t mode = (uint16_t)atoi(aArgs[0]);
+        syslog(LOG_INFO, "-> mode %s", mode==0 ? "Disable IR":(mode==1 ?("OOB IR"):"InBand IR"));
+        if( mode < 3 )
+        {
+            otPlatRadioSetIRConfig(aContext, mode);
+            syslog(LOG_INFO, "ProcessIRConfig DONE");
+        }
+    }
+    else
+    {
+        syslog(LOG_INFO, "ProcessIRConfig FAILED!");
+    }
+
+    return OT_ERROR_NONE;
+}
+
+static otError ProcessIRCmd(void *aContext, uint8_t aArgsLength, char *aArgs[])
+{
+    OT_UNUSED_VARIABLE(aArgsLength);
+    OT_UNUSED_VARIABLE(aArgs);
+    syslog(LOG_INFO, "ProcessIRCmd");
+    otPlatRadioSetIRCmd(aContext);
+    syslog(LOG_INFO, "ProcessIRCmd DONE");
+
+    return OT_ERROR_NONE;
+}
+
+static otError ProcessSetEui64(void *aContext, uint8_t aArgsLength, char *aArgs[])
+{
+    otError error = OT_ERROR_INVALID_ARGS;
+
+    if( aArgsLength == 1 )
+    {
+        otExtAddress addr;
+        char        *hex  = *aArgs;
+
+        syslog(LOG_INFO, "+ SetEui64 %s (len %d)", *aArgs, (uint32_t)strlen(*aArgs));
+
+        if( (hex[1] == 'x') && (strlen(*aArgs) == 18) )
+        {
+            error = OT_ERROR_NONE;
+
+            hex = hex + 2;
+
+            for(uint32_t i = 0; (i < 8) && (error == OT_ERROR_NONE); i++)
+            {
+                addr.m8[i] = 0;
+                for(uint32_t k = 0; k < 2; k++)
+                {
+                    // get current character then increment
+                    uint8_t byte = *hex++;
+                    // transform hex character to the 4bit equivalent number, using the ascii table indexes
+                    if (byte >= '0' && byte <= '9')
+                        byte = byte - '0';
+                    else if (byte >= 'a' && byte <='f')
+                        byte = byte - 'a' + 10;
+                    else if (byte >= 'A' && byte <='F')
+                        byte = byte - 'A' + 10;
+                    else
+                    {
+                        error = OT_ERROR_FAILED;
+                        break;
+                    }
+                    // shift 4 to make space for new digit, and add the 4 bits of the new digit
+                    addr.m8[i] = (addr.m8[i] << 4) | (byte & 0xF);
+                }
+            }
+
+            if( error == OT_ERROR_NONE )
+            {
+                error = otPlatRadioSetIeeeEui64(aContext, (const otExtAddress*)&addr);
+            }
+
+            if( error != OT_ERROR_NONE )
+            {
+                syslog(LOG_INFO, "- SetEui64 Failed (%#x)", error);
+            }
+            else
+            {
+                syslog(LOG_INFO, "- SetEui64 SUCCESS");
+            }
+        }
+        else
+        {
+            syslog(LOG_INFO, "- SetEui64 invalid input arg (0x....?) !");
+        }
+    }
+    else
+    {
+        syslog(LOG_INFO, "- SetEui64 FAILED !");
+    }
+
+    return error;
+}
+
 static const otCliCommand kCommands[] = {
 #if !OPENTHREAD_POSIX_CONFIG_DAEMON_ENABLE
     {"exit", ProcessExit},
 #endif
     {"netif", ProcessNetif},
+    {"ircfg", ProcessIRConfig},    //=> OutOfBand Independent Reset Configuration ircfg <1> means OOB mode
+    {"ircmd", ProcessIRCmd},       //=> InBand Independent Reset command
+    {"seteui64", ProcessSetEui64}, //=> Set ieee.802.15.4 MAC Address
 };
 
 int main(int argc, char *argv[])
diff --git a/src/posix/platform/radio.cpp b/src/posix/platform/radio.cpp
index 3620879ba..a295bf8e5 100644
--- a/src/posix/platform/radio.cpp
+++ b/src/posix/platform/radio.cpp
@@ -734,6 +734,31 @@ otError otPlatRadioReceiveAt(otInstance *aInstance, uint8_t aChannel, uint32_t a
     return OT_ERROR_NOT_IMPLEMENTED;
 }
 
+void otPlatRadioSetIRConfig(otInstance *aInstance, uint8_t mode)
+{
+    OT_UNUSED_VARIABLE(aInstance);
+    SuccessOrDie(sRadioSpinel.Set(SPINEL_PROP_VENDOR_NXP_IR_CONFIG, SPINEL_DATATYPE_UINT16_S, mode));
+}
+
+void otPlatRadioSetIRCmd(otInstance *aInstance)
+{
+    OT_UNUSED_VARIABLE(aInstance);
+    SuccessOrDie(sRadioSpinel.Set(SPINEL_PROP_VENDOR_NXP_IR_CMD, SPINEL_DATATYPE_UINT16_S));
+}
+
+otError otPlatRadioSetIeeeEui64(otInstance *aInstance, const otExtAddress *aIeeeEui64)
+{
+    OT_UNUSED_VARIABLE(aInstance);
+    otExtAddress addr;
+
+    for (size_t i = 0; i < sizeof(addr); i++)
+    {
+        addr.m8[i] = aIeeeEui64->m8[sizeof(addr) - 1 - i];
+    }
+
+    return sRadioSpinel.SetIeeeEui64(*aIeeeEui64);
+}
+
 const otRadioSpinelMetrics *otSysGetRadioSpinelMetrics(void) { return sRadioSpinel.GetRadioSpinelMetrics(); }
 
 const otRcpInterfaceMetrics *otSysGetRcpInterfaceMetrics(void)
