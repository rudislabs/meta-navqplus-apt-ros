diff --git a/src/posix/main.c b/src/posix/main.c
index bea4cf4a5..4c0944e12 100644
--- a/src/posix/main.c
+++ b/src/posix/main.c
@@ -70,27 +70,11 @@
 
 #include "lib/platform/reset_util.h"
 
-#define MFG_CMD_ACTION_GET 0
-#define MFG_CMD_ACTION_SET 1
-
-#define MFG_CMD_GET_SET_CHANNEL 0x0b      // 11
-#define MFG_CMD_GET_SET_TXPOWER 0x0f      // 15
-#define MFG_CMD_CONTINUOUS_TX 0x11        // 17
-#define MFG_CMD_GET_SET_PAYLOAD_SIZE 0x14 // 20
-#define MFG_CMD_GET_RX_RESULT 0x1f        // 31
-#define MFG_CMD_START_RX_TEST 0x20        // 32
-#define MFG_CMD_BURST_TX 0x21             // 33
-#define MFG_CMD_DUTY_CYCLE_TX 0x23        // 35
-#define MFG_CMD_GET_SET_CCA_THRESHOLD  0x2F   // 47
-#define MFG_CMD_CONTINOUS_CCA_TEST 0X31   //49
-#define MFG_CMD_GET_CCA_STATUS 0x32       //50
-#define MFG_CMD_CONTINOUS_ED_TEST 0x37    //55
-#define MFG_CMD_GET_ED_VALUE    0x38      //56
-#define MFG_CMD_PHY_TX_TEST_PSDU 0x39     //57
-#define MFG_CMD_PHY_RX_TX_ACK_TEST 0x3A   //58
-#define MFG_CMD_SET_GENERIC_PARAM 0x3B    //59
-
-uint8_t mfgEnable = 0;
+extern otError ProcessIRConfig(void *aContext, uint8_t aArgsLength, char *aArgs[]);
+extern otError ProcessIRCmd(void *aContext, uint8_t aArgsLength, char *aArgs[]);
+extern otError ProcessSetEui64(void *aContext, uint8_t aArgsLength, char *aArgs[]);
+extern otError ProcessGetSetTxPowerLimit(void *aContext, uint8_t aArgsLength, char *aArgs[]);
+extern otError ProcessMfgCommands(void *aContext, uint8_t aArgsLength, char *aArgs[]);
 
 /**
  * This function initializes NCP app.
@@ -373,476 +357,6 @@ static otError ProcessExit(void *aContext, uint8_t aArgsLength, char *aArgs[])
 }
 #endif
 
-// 15.4_INDEPENDENT_RESET
-static otError ProcessIRConfig(void *aContext, uint8_t aArgsLength, char *aArgs[])
-{
-    syslog(LOG_INFO, "ProcessIRConfig");
-
-    if( aArgsLength == 1 )
-    {
-        uint16_t mode = (uint16_t)atoi(aArgs[0]);
-        syslog(LOG_INFO, "-> mode %s", mode==0 ? "Disable IR":(mode==1 ?("OOB IR"):"InBand IR"));
-        if( mode < 3 )
-        {
-            otPlatRadioSetIRConfig(aContext, mode);
-            syslog(LOG_INFO, "ProcessIRConfig DONE");
-        }
-    }
-    else
-    {
-        syslog(LOG_INFO, "ProcessIRConfig FAILED!");
-    }
-
-    return OT_ERROR_NONE;
-}
-
-static otError ProcessIRCmd(void *aContext, uint8_t aArgsLength, char *aArgs[])
-{
-    OT_UNUSED_VARIABLE(aArgsLength);
-    OT_UNUSED_VARIABLE(aArgs);
-    syslog(LOG_INFO, "ProcessIRCmd");
-    otPlatRadioSetIRCmd(aContext);
-    syslog(LOG_INFO, "ProcessIRCmd DONE");
-
-    return OT_ERROR_NONE;
-}
-
-static otError ProcessSetEui64(void *aContext, uint8_t aArgsLength, char *aArgs[])
-{
-    otError error = OT_ERROR_INVALID_ARGS;
-
-    if( aArgsLength == 1 )
-    {
-        otExtAddress addr;
-        char        *hex  = *aArgs;
-
-        syslog(LOG_INFO, "+ SetEui64 %s (len %d)", *aArgs, (uint32_t)strlen(*aArgs));
-
-        if( (hex[1] == 'x') && (strlen(*aArgs) == 18) )
-        {
-            error = OT_ERROR_NONE;
-
-            hex = hex + 2;
-
-            for(uint32_t i = 0; (i < 8) && (error == OT_ERROR_NONE); i++)
-            {
-                addr.m8[i] = 0;
-                for(uint32_t k = 0; k < 2; k++)
-                {
-                    // get current character then increment
-                    uint8_t byte = *hex++;
-                    // transform hex character to the 4bit equivalent number, using the ascii table indexes
-                    if (byte >= '0' && byte <= '9')
-                        byte = byte - '0';
-                    else if (byte >= 'a' && byte <='f')
-                        byte = byte - 'a' + 10;
-                    else if (byte >= 'A' && byte <='F')
-                        byte = byte - 'A' + 10;
-                    else
-                    {
-                        error = OT_ERROR_FAILED;
-                        break;
-                    }
-                    // shift 4 to make space for new digit, and add the 4 bits of the new digit
-                    addr.m8[i] = (addr.m8[i] << 4) | (byte & 0xF);
-                }
-            }
-
-            if( error == OT_ERROR_NONE )
-            {
-                error = otPlatRadioSetIeeeEui64(aContext, (const otExtAddress*)&addr);
-            }
-
-            if( error != OT_ERROR_NONE )
-            {
-                syslog(LOG_INFO, "- SetEui64 Failed (%#x)", error);
-            }
-            else
-            {
-                syslog(LOG_INFO, "- SetEui64 SUCCESS");
-            }
-        }
-        else
-        {
-            syslog(LOG_INFO, "- SetEui64 invalid input arg (0x....?) !");
-        }
-    }
-    else
-    {
-        syslog(LOG_INFO, "- SetEui64 FAILED !");
-    }
-
-    return error;
-}
-
-static otError ProcessGetSetTxPowerLimit(void *aContext, uint8_t aArgsLength, char *aArgs[])
-{
-
-    otError error = OT_ERROR_INVALID_ARGS;
-    uint8_t txPowerLimit = 0;
-
-    syslog(LOG_INFO, "SetTxPowerLimit");
-
-    if( aArgsLength == 1 ) // set tx power limit
-    {
-        txPowerLimit = (uint8_t)atoi(aArgs[0]);
-        if((txPowerLimit>=1)&&(txPowerLimit<=44)){
-            syslog(LOG_INFO, "-> txPowerLimit : %d", txPowerLimit);
-        }else{
-            syslog(LOG_INFO, "-> txPowerLimit : default value");
-        }
-        otPlatRadioSetTxPowerLimit(aContext, txPowerLimit);
-        syslog(LOG_INFO, "SetTxPowerLimit DONE");
-        error = OT_ERROR_NONE;
-    }
-    else if ( aArgsLength == 0 ) // get tx power limit
-    {
-        otPlatRadioGetTxPowerLimit(aContext, &txPowerLimit);
-
-        // Add value in syslog
-        syslog(LOG_INFO, "TX power Value value : %d", txPowerLimit);
-
-        // Print value as ot-cli output
-        otCliOutputFormat("%d\r\n", txPowerLimit);
-    }
-    else
-    {
-        syslog(LOG_INFO, "SetTxPowerLimit FAILED! Invalid input arg");
-    }
-
-    return error;
-}
-
-static otError ProcessMfgGetInt8(void *aContext, uint8_t cmdId, uint8_t aArgsLength)
-{
-    otError error = OT_ERROR_INVALID_ARGS;
-    uint8_t outputLen = 0;
-    uint8_t payload[12] = {11};
-    uint8_t payloadLen = 12;
-
-    if(aArgsLength == 1)
-    {
-        payload[1] = cmdId;
-        payload[2] = MFG_CMD_ACTION_GET;
-
-        otPlatRadioMfgCommand(aContext, (uint8_t*)payload, payloadLen, &outputLen);
-
-        if((outputLen >= 5) && (payload[3] == 0))
-        {
-            if(cmdId == MFG_CMD_GET_SET_TXPOWER)
-            {
-                otCliOutputFormat("%d\r\n", ((int8_t)payload[4])/2);
-            }
-            else
-            {
-                otCliOutputFormat("%d\r\n", (int8_t)payload[4]);
-            }
-            error = OT_ERROR_NONE;
-        }
-        else{
-            error = OT_ERROR_FAILED;
-        }
-    }
-
-    return error;
-}
-
-static otError ProcessMfgSetInt8(void *aContext, uint8_t cmdId, uint8_t aArgsLength, char *aArgs[], int8_t min, int8_t max)
-{
-    otError error = OT_ERROR_INVALID_ARGS;
-    uint8_t outputLen = 0;
-    uint8_t payload[12] = {11};
-    uint8_t payloadLen = 12;
-    int8_t setValue = 0;
-
-    if(aArgsLength == 2)
-    {
-        setValue = (int8_t)atoi(aArgs[1]);
-        if((setValue >= min) && (setValue <= max))
-        {
-            payload[1] = cmdId;
-            payload[2] = MFG_CMD_ACTION_SET;
-            if(cmdId == MFG_CMD_GET_SET_TXPOWER)
-            {
-                payload[4] = ((uint8_t)setValue) << 1; // convert dBm to half dBm
-            }
-            else
-            {
-                payload[4] = (uint8_t)setValue;
-            }
-
-            otPlatRadioMfgCommand(aContext, (uint8_t*)payload, payloadLen, &outputLen);
-
-            if((outputLen >= 4) && (payload[3] == 0))
-            {
-                error = OT_ERROR_NONE;
-            }
-            else
-            {
-                error = OT_ERROR_FAILED;
-            }
-        }
-    }
-
-    return error;
-}
-
-static otError ProcessMfgCommands(void *aContext, uint8_t aArgsLength, char *aArgs[])
-{
-    uint8_t payload[12] = {11};
-    uint8_t payloadLen = 12;
-    uint8_t outputLen = 0;
-    otError error = OT_ERROR_INVALID_ARGS;
-    uint8_t cmdId, idx;
-
-    if(aArgsLength == 1)
-    {
-        cmdId = (uint8_t)atoi(aArgs[0]);
-        if((cmdId == 0)||(cmdId == 1))
-        {
-            mfgEnable = cmdId;
-            syslog(LOG_INFO, "MFG command SUCCESS");
-            return OT_ERROR_NONE;
-        }
-    }
-
-    if(mfgEnable == 0)
-    {
-        syslog(LOG_INFO, "MFG command not enabled");
-        otCliOutputFormat("MFG command not enabled. to enable it : mfgcmd 1\r\n");
-        return OT_ERROR_NONE;
-    }
-
-    if ((aArgsLength > 0) && (mfgEnable == 1))
-    {
-        cmdId = (uint8_t)atoi(aArgs[0]);
-
-        switch (cmdId)
-        {
-        case MFG_CMD_GET_SET_CHANNEL: // get channel
-            error = ProcessMfgGetInt8(aContext, MFG_CMD_GET_SET_CHANNEL, aArgsLength);
-            break;
-
-        case MFG_CMD_GET_SET_CHANNEL + 1: // set channel
-            error = ProcessMfgSetInt8(aContext, MFG_CMD_GET_SET_CHANNEL, aArgsLength, aArgs, 11, 26);
-            break;
-
-        case MFG_CMD_GET_SET_TXPOWER: // get txpower
-            error = ProcessMfgGetInt8(aContext, MFG_CMD_GET_SET_TXPOWER, aArgsLength);
-            break;
-
-        case MFG_CMD_GET_SET_TXPOWER + 1: // set txpower
-            error = ProcessMfgSetInt8(aContext, MFG_CMD_GET_SET_TXPOWER, aArgsLength, aArgs, -20, 22);
-            break;
-
-        case MFG_CMD_CONTINUOUS_TX:
-            error = ProcessMfgSetInt8(aContext, MFG_CMD_CONTINUOUS_TX, aArgsLength, aArgs, 0, 1);
-            break;
-
-        case MFG_CMD_GET_SET_PAYLOAD_SIZE: // get
-            error = ProcessMfgGetInt8(aContext, MFG_CMD_GET_SET_PAYLOAD_SIZE, aArgsLength);
-            break;
-
-        case MFG_CMD_GET_SET_PAYLOAD_SIZE + 1: // set
-            error = ProcessMfgSetInt8(aContext, MFG_CMD_GET_SET_PAYLOAD_SIZE, aArgsLength, aArgs, 0, 127);
-            // actual limits are set in MFG function and error is return in case of wrong parameter
-            break;
-
-        case MFG_CMD_GET_RX_RESULT:
-        {
-            if(aArgsLength == 1)
-            {
-                payload[1] = MFG_CMD_GET_RX_RESULT;
-                payload[2] = MFG_CMD_ACTION_GET;
-                otPlatRadioMfgCommand(aContext, (uint8_t*)payload, payloadLen, &outputLen);
-                if(outputLen >= 11)
-                {
-                    otCliOutputFormat("status : %d\r\n", payload[4]);
-                    otCliOutputFormat("rx_pkt_count : %d\r\n", payload[5]|(payload[6]<<8));
-                    otCliOutputFormat("total_pkt_count : %d\r\n", payload[7]|(payload[8]<<8));
-                    otCliOutputFormat("rssi : %d\r\n",(int8_t)payload[9]);
-                    otCliOutputFormat("lqi : %d\r\n", payload[10]);
-                    error = OT_ERROR_NONE;
-                }
-                else{
-                    error = OT_ERROR_FAILED;
-                }
-            }
-        }
-        break;
-
-        case MFG_CMD_START_RX_TEST:
-        {
-            if(aArgsLength == 1)
-            {
-                payload[1] = MFG_CMD_START_RX_TEST;
-                otPlatRadioMfgCommand(aContext, (uint8_t*)payload, payloadLen, &outputLen);
-                error = OT_ERROR_NONE;
-            }
-        }
-        break;
-
-        case MFG_CMD_BURST_TX:
-        {
-            uint8_t mode = 0;
-            if(aArgsLength == 3)
-            {
-                mode = (uint8_t)atoi(aArgs[1]);
-                if(mode < 8)
-                {
-                    payload[1] = MFG_CMD_BURST_TX;
-                    payload[4] = mode;
-                    payload[5] = (uint8_t)atoi(aArgs[2]);
-                    otPlatRadioMfgCommand(aContext, (uint8_t*)payload, payloadLen, &outputLen);
-                    error = OT_ERROR_NONE;
-                }
-            }
-        }
-        break;
-
-        case MFG_CMD_DUTY_CYCLE_TX:
-            error = ProcessMfgSetInt8(aContext, MFG_CMD_DUTY_CYCLE_TX, aArgsLength, aArgs, 0, 1);
-            break;
-
-        case MFG_CMD_GET_SET_CCA_THRESHOLD: // get
-            error = ProcessMfgGetInt8(aContext, MFG_CMD_GET_SET_CCA_THRESHOLD, aArgsLength);
-            break;
-
-        case MFG_CMD_GET_SET_CCA_THRESHOLD + 1: // set
-            error = ProcessMfgSetInt8(aContext, MFG_CMD_GET_SET_CCA_THRESHOLD, aArgsLength, aArgs, -110, 0);
-            break;
-
-        case MFG_CMD_CONTINOUS_CCA_TEST:
-        {
-            if(aArgsLength == 3)
-            {
-                payload[1] = MFG_CMD_CONTINOUS_CCA_TEST;
-                payload[2] = MFG_CMD_ACTION_SET;
-                payload[4] = (uint8_t)atoi(aArgs[1]);
-                payload[5] = (uint8_t)atoi(aArgs[2]);
-                otPlatRadioMfgCommand(aContext, (uint8_t*)payload, payloadLen, &outputLen);
-                if((outputLen >= 4) && (payload[3] == 0))
-                {
-                    error = OT_ERROR_NONE;
-                }
-                else{
-                    error = OT_ERROR_FAILED;
-                }
-            }
-        }
-        break;
-
-        case MFG_CMD_GET_CCA_STATUS: // get
-            error = ProcessMfgGetInt8(aContext, MFG_CMD_GET_CCA_STATUS, aArgsLength);
-            break;
-
-        case MFG_CMD_CONTINOUS_ED_TEST:
-            error = ProcessMfgSetInt8(aContext, MFG_CMD_CONTINOUS_ED_TEST, aArgsLength, aArgs, -127, 127);
-            break;
-
-        case MFG_CMD_GET_ED_VALUE:
-            error = ProcessMfgGetInt8(aContext, MFG_CMD_GET_ED_VALUE, aArgsLength);
-            break;
-
-        case MFG_CMD_PHY_TX_TEST_PSDU:
-        {
-            uint8_t count_opt, gap, ackEnable;
-            if(aArgsLength == 4)
-            {
-                payload[1]  = MFG_CMD_PHY_TX_TEST_PSDU;
-                payload[2]  = MFG_CMD_ACTION_SET;
-
-                count_opt = (uint8_t)atoi(aArgs[1]);
-                gap       = (uint8_t)atoi(aArgs[2]);
-                ackEnable = (uint8_t)atoi(aArgs[3]);
-                if((count_opt < 8) && (gap > 5) && (ackEnable < 2))
-                {
-                    payload[4]  = count_opt;
-                    payload[5]  = gap;
-                    payload[6]  = ackEnable;
-                    otPlatRadioMfgCommand(aContext, (uint8_t*)payload, payloadLen, &outputLen);
-                    error = OT_ERROR_NONE;
-                }
-            }
-        }
-        break;
-
-        case MFG_CMD_PHY_RX_TX_ACK_TEST:
-            error = ProcessMfgSetInt8(aContext, MFG_CMD_PHY_RX_TX_ACK_TEST, aArgsLength, aArgs, 0, 1);
-            break;
-
-        case MFG_CMD_SET_GENERIC_PARAM:
-        {
-            uint16_t panid, destaddr, srcaddr;
-            if(aArgsLength == 5)
-            {
-                panid       = (uint16_t)strtol(aArgs[2], NULL, 16);
-                destaddr    = (uint16_t)strtol(aArgs[3], NULL, 16);
-                srcaddr     = (uint16_t)strtol(aArgs[4], NULL, 16);
-
-                payload[1]  = MFG_CMD_SET_GENERIC_PARAM;
-                payload[2]  = MFG_CMD_ACTION_SET;
-                payload[4]  = (uint8_t) atoi(aArgs[1]); // SEQ_NUM
-                payload[5]  = (uint8_t) (panid & 0xFF); // PAN ID LSB
-                payload[6]  = (uint8_t) ((panid >> 8) & 0xFF); // PAN ID MSB
-                payload[7]  = (uint8_t) (destaddr & 0xFF); // DEST ADDR LSB
-                payload[8]  = (uint8_t) ((destaddr >> 8) & 0xFF); // DEST ADDR MSB
-                payload[9]  = (uint8_t) (srcaddr & 0xFF); // SRC ADDR LSB
-                payload[10] = (uint8_t) ((srcaddr >> 8) & 0xFF); // SRC ADDR MSB
-
-                otPlatRadioMfgCommand(aContext, (uint8_t*)payload, payloadLen, &outputLen);
-                error = OT_ERROR_NONE;
-            }
-        }
-        break;
-
-        default:
-            error = OT_ERROR_NOT_IMPLEMENTED;
-            break;
-        }
-    }
-
-    //HANDLE ERRORS
-    if(error == OT_ERROR_NONE)
-    {
-        syslog(LOG_INFO, "MFG command SUCCESS");
-    }
-    else if(aArgsLength == payloadLen)
-    {
-        // If user passed all the payload, this means this is a direct message for the RCP.
-        // Send it and print the return results.
-        for(idx = 0; idx < payloadLen; idx++)
-        {
-            payload[idx] = (uint8_t)atoi(aArgs[idx]);
-        }
-        otPlatRadioMfgCommand(aContext, (uint8_t *)payload, payloadLen, &outputLen);
-        for(idx = 0; idx < outputLen; idx++)
-        {
-            otCliOutputFormat("%d ", payload[idx]);
-        }
-        otCliOutputFormat("\r\n");
-        error = OT_ERROR_NONE;
-        syslog(LOG_INFO, "MFG command SUCCESS");
-    }
-    else if(error == OT_ERROR_INVALID_ARGS)
-    {
-        syslog(LOG_INFO, "MFG command Invalid parameter");
-        otCliOutputFormat("INVALID PARAMETER\r\n");
-    }
-    else if(error == OT_ERROR_NOT_IMPLEMENTED)
-    {
-        syslog(LOG_INFO, "MFG command not implemented");
-        otCliOutputFormat("NOT IMPLEMENTED\r\n");
-    }
-    else
-    {
-        syslog(LOG_INFO, "MFG command FAILED");
-        otCliOutputFormat("FAILED\r\n");
-    }
-
-    return error;
-}
-
 static const otCliCommand kCommands[] = {
 #if !OPENTHREAD_POSIX_CONFIG_DAEMON_ENABLE
     {"exit", ProcessExit},
diff --git a/src/posix/platform/daemon.cpp b/src/posix/platform/daemon.cpp
index acf897eb0..8c97a844b 100644
--- a/src/posix/platform/daemon.cpp
+++ b/src/posix/platform/daemon.cpp
@@ -71,6 +71,509 @@ void GetFilename(Filename &aFilename, const char *aPattern)
 
 } // namespace
 
+//Vendor Specific commands
+extern "C"
+{
+#define MFG_CMD_ACTION_GET 0
+#define MFG_CMD_ACTION_SET 1
+
+#define MFG_CMD_GET_SET_CHANNEL 0x0b      // 11
+#define MFG_CMD_GET_SET_TXPOWER 0x0f      // 15
+#define MFG_CMD_CONTINUOUS_TX 0x11        // 17
+#define MFG_CMD_GET_SET_PAYLOAD_SIZE 0x14 // 20
+#define MFG_CMD_GET_RX_RESULT 0x1f        // 31
+#define MFG_CMD_START_RX_TEST 0x20        // 32
+#define MFG_CMD_BURST_TX 0x21             // 33
+#define MFG_CMD_DUTY_CYCLE_TX 0x23        // 35
+#define MFG_CMD_GET_SET_CCA_THRESHOLD  0x2F   // 47
+#define MFG_CMD_CONTINOUS_CCA_TEST 0X31   //49
+#define MFG_CMD_GET_CCA_STATUS 0x32       //50
+#define MFG_CMD_CONTINOUS_ED_TEST 0x37    //55
+#define MFG_CMD_GET_ED_VALUE    0x38      //56
+#define MFG_CMD_PHY_TX_TEST_PSDU 0x39     //57
+#define MFG_CMD_PHY_RX_TX_ACK_TEST 0x3A   //58
+#define MFG_CMD_SET_GENERIC_PARAM 0x3B    //59
+
+static uint8_t mfgEnable = 0;
+
+// 15.4_INDEPENDENT_RESET
+otError ProcessIRConfig(void *aContext, uint8_t aArgsLength, char *aArgs[])
+{
+    //syslog(LOG_INFO, "ProcessIRConfig");
+
+    if( aArgsLength == 1 )
+    {
+        uint16_t mode = (uint16_t)atoi(aArgs[0]);
+        //syslog(LOG_INFO, "-> mode %s", mode==0 ? "Disable IR":(mode==1 ?("OOB IR"):"InBand IR"));
+        if( mode < 3 )
+        {
+            otPlatRadioSetIRConfig((otInstance*)aContext, mode);
+            //syslog(LOG_INFO, "ProcessIRConfig DONE");
+        }
+    }
+    else
+    {
+        //syslog(LOG_INFO, "ProcessIRConfig FAILED!");
+    }
+
+    return OT_ERROR_NONE;
+}
+
+otError ProcessIRCmd(void *aContext, uint8_t aArgsLength, char *aArgs[])
+{
+    OT_UNUSED_VARIABLE(aArgsLength);
+    OT_UNUSED_VARIABLE(aArgs);
+    //syslog(LOG_INFO, "ProcessIRCmd");
+    otPlatRadioSetIRCmd((otInstance*)aContext);
+    //syslog(LOG_INFO, "ProcessIRCmd DONE");
+
+    return OT_ERROR_NONE;
+}
+
+otError ProcessSetEui64(void *aContext, uint8_t aArgsLength, char *aArgs[])
+{
+    otError error = OT_ERROR_INVALID_ARGS;
+
+    if( aArgsLength == 1 )
+    {
+        otExtAddress addr;
+        char        *hex  = *aArgs;
+
+        //syslog(LOG_INFO, "+ SetEui64 %s (len %d)", *aArgs, (uint32_t)strlen(*aArgs));
+
+        if( (hex[1] == 'x') && (strlen(*aArgs) == 18) )
+        {
+            error = OT_ERROR_NONE;
+
+            hex = hex + 2;
+
+            for(uint32_t i = 0; (i < 8) && (error == OT_ERROR_NONE); i++)
+            {
+                addr.m8[i] = 0;
+                for(uint32_t k = 0; k < 2; k++)
+                {
+                    // get current character then increment
+                    uint8_t byte = *hex++;
+                    // transform hex character to the 4bit equivalent number, using the ascii table indexes
+                    if (byte >= '0' && byte <= '9')
+                        byte = byte - '0';
+                    else if (byte >= 'a' && byte <='f')
+                        byte = byte - 'a' + 10;
+                    else if (byte >= 'A' && byte <='F')
+                        byte = byte - 'A' + 10;
+                    else
+                    {
+                        error = OT_ERROR_FAILED;
+                        break;
+                    }
+                    // shift 4 to make space for new digit, and add the 4 bits of the new digit
+                    addr.m8[i] = (addr.m8[i] << 4) | (byte & 0xF);
+                }
+            }
+
+            if( error == OT_ERROR_NONE )
+            {
+                error = otPlatRadioSetIeeeEui64((otInstance*)aContext, (const otExtAddress*)&addr);
+            }
+
+            if( error != OT_ERROR_NONE )
+            {
+                //syslog(LOG_INFO, "- SetEui64 Failed (%#x)", error);
+            }
+            else
+            {
+                //syslog(LOG_INFO, "- SetEui64 SUCCESS");
+            }
+        }
+        else
+        {
+            //syslog(LOG_INFO, "- SetEui64 invalid input arg (0x....?) !");
+        }
+    }
+    else
+    {
+        //syslog(LOG_INFO, "- SetEui64 FAILED !");
+    }
+
+    return error;
+}
+
+otError ProcessGetSetTxPowerLimit(void *aContext, uint8_t aArgsLength, char *aArgs[])
+{
+
+    otError error = OT_ERROR_INVALID_ARGS;
+    uint8_t txPowerLimit = 0;
+
+    //syslog(LOG_INFO, "SetTxPowerLimit");
+
+    if( aArgsLength == 1 ) // set tx power limit
+    {
+        txPowerLimit = (uint8_t)atoi(aArgs[0]);
+        if((txPowerLimit>=1)&&(txPowerLimit<=44)){
+            //syslog(LOG_INFO, "-> txPowerLimit : %d", txPowerLimit);
+        }else{
+            //syslog(LOG_INFO, "-> txPowerLimit : default value");
+        }
+        otPlatRadioSetTxPowerLimit((otInstance*)aContext, txPowerLimit);
+        //syslog(LOG_INFO, "SetTxPowerLimit DONE");
+        error = OT_ERROR_NONE;
+    }
+    else if ( aArgsLength == 0 ) // get tx power limit
+    {
+        otPlatRadioGetTxPowerLimit((otInstance*)aContext, &txPowerLimit);
+
+        // Add value in syslog
+        //syslog(LOG_INFO, "TX power Value value : %d", txPowerLimit);
+
+        // Print value as ot-cli output
+        otCliOutputFormat("%d\r\n", txPowerLimit);
+    }
+    else
+    {
+        //syslog(LOG_INFO, "SetTxPowerLimit FAILED! Invalid input arg");
+    }
+
+    return error;
+}
+
+ otError ProcessMfgGetInt8(void *aContext, uint8_t cmdId, uint8_t aArgsLength)
+{
+    otError error = OT_ERROR_INVALID_ARGS;
+    uint8_t outputLen = 0;
+    uint8_t payload[12] = {11};
+    uint8_t payloadLen = 12;
+
+    if(aArgsLength == 1)
+    {
+        payload[1] = cmdId;
+        payload[2] = MFG_CMD_ACTION_GET;
+
+        otPlatRadioMfgCommand((otInstance*)aContext, (uint8_t*)payload, payloadLen, &outputLen);
+
+        if((outputLen >= 5) && (payload[3] == 0))
+        {
+            if(cmdId == MFG_CMD_GET_SET_TXPOWER)
+            {
+                otCliOutputFormat("%d\r\n", ((int8_t)payload[4])/2);
+            }
+            else
+            {
+                otCliOutputFormat("%d\r\n", (int8_t)payload[4]);
+            }
+            error = OT_ERROR_NONE;
+        }
+        else{
+            error = OT_ERROR_FAILED;
+        }
+    }
+
+    return error;
+}
+
+ otError ProcessMfgSetInt8(void *aContext, uint8_t cmdId, uint8_t aArgsLength, char *aArgs[], int8_t min, int8_t max)
+{
+    otError error = OT_ERROR_INVALID_ARGS;
+    uint8_t outputLen = 0;
+    uint8_t payload[12] = {11};
+    uint8_t payloadLen = 12;
+    int8_t setValue = 0;
+
+    if(aArgsLength == 2)
+    {
+        setValue = (int8_t)atoi(aArgs[1]);
+        if((setValue >= min) && (setValue <= max))
+        {
+            payload[1] = cmdId;
+            payload[2] = MFG_CMD_ACTION_SET;
+            if(cmdId == MFG_CMD_GET_SET_TXPOWER)
+            {
+                payload[4] = ((uint8_t)setValue) << 1; // convert dBm to half dBm
+            }
+            else
+            {
+                payload[4] = (uint8_t)setValue;
+            }
+
+            otPlatRadioMfgCommand((otInstance*)aContext, (uint8_t*)payload, payloadLen, &outputLen);
+
+            if((outputLen >= 4) && (payload[3] == 0))
+            {
+                error = OT_ERROR_NONE;
+            }
+            else
+            {
+                error = OT_ERROR_FAILED;
+            }
+        }
+    }
+
+    return error;
+}
+
+otError ProcessMfgCommands(void *aContext, uint8_t aArgsLength, char *aArgs[])
+{
+    uint8_t payload[12] = {11};
+    uint8_t payloadLen = 12;
+    uint8_t outputLen = 0;
+    otError error = OT_ERROR_INVALID_ARGS;
+    uint8_t cmdId, idx;
+
+    if(aArgsLength == 1)
+    {
+        cmdId = (uint8_t)atoi(aArgs[0]);
+        if((cmdId == 0)||(cmdId == 1))
+        {
+            mfgEnable = cmdId;
+            //syslog(LOG_INFO, "MFG command SUCCESS");
+            return OT_ERROR_NONE;
+        }
+    }
+
+    if(mfgEnable == 0)
+    {
+        //syslog(LOG_INFO, "MFG command not enabled");
+        otCliOutputFormat("MFG command not enabled. to enable it : mfgcmd 1\r\n");
+        return OT_ERROR_NONE;
+    }
+
+    if ((aArgsLength > 0) && (mfgEnable == 1))
+    {
+        cmdId = (uint8_t)atoi(aArgs[0]);
+
+        switch (cmdId)
+        {
+        case MFG_CMD_GET_SET_CHANNEL: // get channel
+            error = ProcessMfgGetInt8((otInstance*)aContext, MFG_CMD_GET_SET_CHANNEL, aArgsLength);
+            break;
+
+        case MFG_CMD_GET_SET_CHANNEL + 1: // set channel
+            error = ProcessMfgSetInt8((otInstance*)aContext, MFG_CMD_GET_SET_CHANNEL, aArgsLength, aArgs, 11, 26);
+            break;
+
+        case MFG_CMD_GET_SET_TXPOWER: // get txpower
+            error = ProcessMfgGetInt8((otInstance*)aContext, MFG_CMD_GET_SET_TXPOWER, aArgsLength);
+            break;
+
+        case MFG_CMD_GET_SET_TXPOWER + 1: // set txpower
+            error = ProcessMfgSetInt8((otInstance*)aContext, MFG_CMD_GET_SET_TXPOWER, aArgsLength, aArgs, -20, 22);
+            break;
+
+        case MFG_CMD_CONTINUOUS_TX:
+            error = ProcessMfgSetInt8((otInstance*)aContext, MFG_CMD_CONTINUOUS_TX, aArgsLength, aArgs, 0, 1);
+            break;
+
+        case MFG_CMD_GET_SET_PAYLOAD_SIZE: // get
+            error = ProcessMfgGetInt8((otInstance*)aContext, MFG_CMD_GET_SET_PAYLOAD_SIZE, aArgsLength);
+            break;
+
+        case MFG_CMD_GET_SET_PAYLOAD_SIZE + 1: // set
+            error = ProcessMfgSetInt8((otInstance*)aContext, MFG_CMD_GET_SET_PAYLOAD_SIZE, aArgsLength, aArgs, 0, 127);
+            // actual limits are set in MFG function and error is return in case of wrong parameter
+            break;
+
+        case MFG_CMD_GET_RX_RESULT:
+        {
+            if(aArgsLength == 1)
+            {
+                payload[1] = MFG_CMD_GET_RX_RESULT;
+                payload[2] = MFG_CMD_ACTION_GET;
+                otPlatRadioMfgCommand((otInstance*)aContext, (uint8_t*)payload, payloadLen, &outputLen);
+                if(outputLen >= 11)
+                {
+                    otCliOutputFormat("status : %d\r\n", payload[4]);
+                    otCliOutputFormat("rx_pkt_count : %d\r\n", payload[5]|(payload[6]<<8));
+                    otCliOutputFormat("total_pkt_count : %d\r\n", payload[7]|(payload[8]<<8));
+                    otCliOutputFormat("rssi : %d\r\n",(int8_t)payload[9]);
+                    otCliOutputFormat("lqi : %d\r\n", payload[10]);
+                    error = OT_ERROR_NONE;
+                }
+                else{
+                    error = OT_ERROR_FAILED;
+                }
+            }
+        }
+        break;
+
+        case MFG_CMD_START_RX_TEST:
+        {
+            if(aArgsLength == 1)
+            {
+                payload[1] = MFG_CMD_START_RX_TEST;
+                otPlatRadioMfgCommand((otInstance*)aContext, (uint8_t*)payload, payloadLen, &outputLen);
+                error = OT_ERROR_NONE;
+            }
+        }
+        break;
+
+        case MFG_CMD_BURST_TX:
+        {
+            uint8_t mode = 0;
+            if(aArgsLength == 3)
+            {
+                mode = (uint8_t)atoi(aArgs[1]);
+                if(mode < 8)
+                {
+                    payload[1] = MFG_CMD_BURST_TX;
+                    payload[4] = mode;
+                    payload[5] = (uint8_t)atoi(aArgs[2]);
+                    otPlatRadioMfgCommand((otInstance*)aContext, (uint8_t*)payload, payloadLen, &outputLen);
+                    error = OT_ERROR_NONE;
+                }
+            }
+        }
+        break;
+
+        case MFG_CMD_DUTY_CYCLE_TX:
+            error = ProcessMfgSetInt8((otInstance*)aContext, MFG_CMD_DUTY_CYCLE_TX, aArgsLength, aArgs, 0, 1);
+            break;
+
+        case MFG_CMD_GET_SET_CCA_THRESHOLD: // get
+            error = ProcessMfgGetInt8((otInstance*)aContext, MFG_CMD_GET_SET_CCA_THRESHOLD, aArgsLength);
+            break;
+
+        case MFG_CMD_GET_SET_CCA_THRESHOLD + 1: // set
+            error = ProcessMfgSetInt8((otInstance*)aContext, MFG_CMD_GET_SET_CCA_THRESHOLD, aArgsLength, aArgs, -110, 0);
+            break;
+
+        case MFG_CMD_CONTINOUS_CCA_TEST:
+        {
+            if(aArgsLength == 3)
+            {
+                payload[1] = MFG_CMD_CONTINOUS_CCA_TEST;
+                payload[2] = MFG_CMD_ACTION_SET;
+                payload[4] = (uint8_t)atoi(aArgs[1]);
+                payload[5] = (uint8_t)atoi(aArgs[2]);
+                otPlatRadioMfgCommand((otInstance*)aContext, (uint8_t*)payload, payloadLen, &outputLen);
+                if((outputLen >= 4) && (payload[3] == 0))
+                {
+                    error = OT_ERROR_NONE;
+                }
+                else{
+                    error = OT_ERROR_FAILED;
+                }
+            }
+        }
+        break;
+
+        case MFG_CMD_GET_CCA_STATUS: // get
+            error = ProcessMfgGetInt8((otInstance*)aContext, MFG_CMD_GET_CCA_STATUS, aArgsLength);
+            break;
+
+        case MFG_CMD_CONTINOUS_ED_TEST:
+            error = ProcessMfgSetInt8((otInstance*)aContext, MFG_CMD_CONTINOUS_ED_TEST, aArgsLength, aArgs, -127, 127);
+            break;
+
+        case MFG_CMD_GET_ED_VALUE:
+            error = ProcessMfgGetInt8((otInstance*)aContext, MFG_CMD_GET_ED_VALUE, aArgsLength);
+            break;
+
+        case MFG_CMD_PHY_TX_TEST_PSDU:
+        {
+            uint8_t count_opt, gap, ackEnable;
+            if(aArgsLength == 4)
+            {
+                payload[1]  = MFG_CMD_PHY_TX_TEST_PSDU;
+                payload[2]  = MFG_CMD_ACTION_SET;
+
+                count_opt = (uint8_t)atoi(aArgs[1]);
+                gap       = (uint8_t)atoi(aArgs[2]);
+                ackEnable = (uint8_t)atoi(aArgs[3]);
+                if((count_opt < 8) && (gap > 5) && (ackEnable < 2))
+                {
+                    payload[4]  = count_opt;
+                    payload[5]  = gap;
+                    payload[6]  = ackEnable;
+                    otPlatRadioMfgCommand((otInstance*)aContext, (uint8_t*)payload, payloadLen, &outputLen);
+                    error = OT_ERROR_NONE;
+                }
+            }
+        }
+        break;
+
+        case MFG_CMD_PHY_RX_TX_ACK_TEST:
+            error = ProcessMfgSetInt8((otInstance*)aContext, MFG_CMD_PHY_RX_TX_ACK_TEST, aArgsLength, aArgs, 0, 1);
+            break;
+
+        case MFG_CMD_SET_GENERIC_PARAM:
+        {
+            uint16_t panid, destaddr, srcaddr;
+            if(aArgsLength == 5)
+            {
+                panid       = (uint16_t)strtol(aArgs[2], NULL, 16);
+                destaddr    = (uint16_t)strtol(aArgs[3], NULL, 16);
+                srcaddr     = (uint16_t)strtol(aArgs[4], NULL, 16);
+
+                payload[1]  = MFG_CMD_SET_GENERIC_PARAM;
+                payload[2]  = MFG_CMD_ACTION_SET;
+                payload[4]  = (uint8_t) atoi(aArgs[1]); // SEQ_NUM
+                payload[5]  = (uint8_t) (panid & 0xFF); // PAN ID LSB
+                payload[6]  = (uint8_t) ((panid >> 8) & 0xFF); // PAN ID MSB
+                payload[7]  = (uint8_t) (destaddr & 0xFF); // DEST ADDR LSB
+                payload[8]  = (uint8_t) ((destaddr >> 8) & 0xFF); // DEST ADDR MSB
+                payload[9]  = (uint8_t) (srcaddr & 0xFF); // SRC ADDR LSB
+                payload[10] = (uint8_t) ((srcaddr >> 8) & 0xFF); // SRC ADDR MSB
+
+                otPlatRadioMfgCommand((otInstance*)aContext, (uint8_t*)payload, payloadLen, &outputLen);
+                error = OT_ERROR_NONE;
+            }
+        }
+        break;
+
+        default:
+            error = OT_ERROR_NOT_IMPLEMENTED;
+            break;
+        }
+    }
+
+    //HANDLE ERRORS
+    if(error == OT_ERROR_NONE)
+    {
+        //syslog(LOG_INFO, "MFG command SUCCESS");
+    }
+    else if(aArgsLength == payloadLen)
+    {
+        // If user passed all the payload, this means this is a direct message for the RCP.
+        // Send it and print the return results.
+        for(idx = 0; idx < payloadLen; idx++)
+        {
+            payload[idx] = (uint8_t)atoi(aArgs[idx]);
+        }
+        otPlatRadioMfgCommand((otInstance*)aContext, (uint8_t *)payload, payloadLen, &outputLen);
+        for(idx = 0; idx < outputLen; idx++)
+        {
+            otCliOutputFormat("%d ", payload[idx]);
+        }
+        otCliOutputFormat("\r\n");
+        error = OT_ERROR_NONE;
+        //syslog(LOG_INFO, "MFG command SUCCESS");
+    }
+    else if(error == OT_ERROR_INVALID_ARGS)
+    {
+        //syslog(LOG_INFO, "MFG command Invalid parameter");
+        otCliOutputFormat("INVALID PARAMETER\r\n");
+    }
+    else if(error == OT_ERROR_NOT_IMPLEMENTED)
+    {
+        //syslog(LOG_INFO, "MFG command not implemented");
+        otCliOutputFormat("NOT IMPLEMENTED\r\n");
+    }
+    else
+    {
+        //syslog(LOG_INFO, "MFG command FAILED");
+        otCliOutputFormat("FAILED\r\n");
+    }
+
+    return error;
+}
+static const otCliCommand kCommands[] = {
+    {"ircfg", ProcessIRConfig},    //=> OutOfBand Independent Reset Configuration ircfg <1> means OOB mode
+    {"ircmd", ProcessIRCmd},       //=> InBand Independent Reset command
+    {"seteui64", ProcessSetEui64}, //=> Set ieee.802.15.4 MAC Address
+    {"txpwrlimit", ProcessGetSetTxPowerLimit}, //=> Set TX power limit for 15.4
+    {"mfgcmd", ProcessMfgCommands} //=> Generic VSC for MFG RF commands
+};
+} //extern "C"
+
 int Daemon::OutputFormatV(const char *aFormat, va_list aArguments)
 {
     char buf[OPENTHREAD_CONFIG_CLI_MAX_LINE_LENGTH + 1];
@@ -243,6 +746,8 @@ void Daemon::SetUp(void)
         },
         this);
 
+    otCliSetUserCommands(kCommands, OT_ARRAY_LENGTH(kCommands), gInstance);
+
     Mainloop::Manager::Get().Add(*this);
 
 exit:
